from typing import TYPE_CHECKING, List

from pydantic import parse_obj_as
from nonebot.drivers import Request

from .model import *
from .request import _request, _exclude_none

if TYPE_CHECKING:
    from nonebot.adapters.qqguild.bot import Bot
    from nonebot.adapters.qqguild.adapter import Adapter

{% for api in apis %}
{% set queries = [] -%}
{%- for query_param in api.query_params -%}
{%- set _ = queries.append('"' + query_param.name + '": ' + query_param.name) -%}
{%- endfor %}
{% set has_param = api.path_param or api.query_param %}
async def _{{api.name}}(adapter: "Adapter", bot: "Bot"{% if has_param %}, *{% endif %}{% include "param.jinja" %}{%- if api.body %}, **data{% endif -%}) -> {{api.return_type.to_annotation() if api.return_type else "None"}}:
    request = Request(
        "{{api.method|upper}}",
        adapter.get_api_base() / f"{{api.path.removeprefix('/')}}",{% if queries %}
        params=_exclude_none({{'{'}}{{queries|join(", ")}}{{'}'}}),{% endif %}{% if api.body %}
        content={{api.body.to_annotation()}}(**data).json(exclude_none=True),{% endif %}
        headers={"Authorization": adapter.get_authorization(bot.bot_info)},
    )
    {% if api.return_type -%}
    return parse_obj_as({{api.return_type.to_annotation()}}, await _request(adapter, bot, request))
    {%- else -%}
    return await _request(adapter, bot, request)
    {%- endif %}
{% endfor %}

API_HANDLERS = {
{% for api in apis %}
    "{{api.name}}": _{{api.name}},
{% endfor %}
}
